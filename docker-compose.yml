version: '3.8'

services:
  yarn:
    container_name: ${PROJECT_NAME}-Yarn
    build:
      context: ./nest-api
      dockerfile: ../docker/node/Dockerfile
      args:
        NODE_VERSION: ${NODE_VERSION}
      target: yarn
    env_file: .env
    entrypoint: yarn
    volumes:
      - ./nest-api:/src
    networks:
      - project-manager

  nest:
    container_name: ${PROJECT_NAME}-Nest
    build:
      context: ./nest-api
      dockerfile: ../docker/node/Dockerfile
      args:
        NODE_VERSION: ${NODE_VERSION}
      target: nest
    env_file: .env
    entrypoint: nest
    volumes:
      - ./nest-api:/src
    networks:
      - project-manager

  dev:
    container_name: ${PROJECT_NAME}-Nest-Dev-Server
    build:
      context: ./nest-api
      dockerfile: ../docker/node/Dockerfile
      args:
        NODE_VERSION: ${NODE_VERSION}
      target: yarn
    env_file: .env
    depends_on:
      - database
    links:
      - database
    ports:
      - ${API_PORT}:${API_PORT}
    entrypoint: yarn
    command: run start:dev
    volumes:
      - ./nest-api:/src
    networks:
      - project-manager

  redis:
    image: redis:6.2-alpine
    container_name: ${PROJECT_NAME}-Cache
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    entrypoint: redis-server --appendonly yes
    volumes:
      - project-manager-cache:/data
    networks:
      - project-manager

  database:
    image: postgres:13.3-alpine
    container_name: ${PROJECT_NAME}-Database
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      - project-manager-data:/var/lib/postgresql/data/
    networks:
      - project-manager

networks:
  project-manager:

volumes:
  project-manager-data:
  project-manager-cache:
